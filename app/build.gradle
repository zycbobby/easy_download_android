repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}

apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'
//apply plugin: 'crashlytics' //TODO Replace API Key in AndroidManifest.xml
apply plugin: 'com.github.triplet.play'

//Setup distribution options, based on local variable $ANDROID_DISTRIBUTION
enum DISTRIBUTION_CHANNEL { CRASHLYTICS, PLAY }
def distribution = System.getenv("ANDROID_DISTRIBUTION")
def distributionChannel
def distributionGroup
if (distribution != null) {
    if (distribution.startsWith("crashlytics")) {
        distributionChannel = DISTRIBUTION_CHANNEL.CRASHLYTICS
    } else if (distribution.startsWith("play")) {
        distributionChannel = DISTRIBUTION_CHANNEL.PLAY
    }
    distributionGroup = distribution.substring(distribution.indexOf("-") + 1)
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "uk.co.ribot.androidboilerplate"
        minSdkVersion 16
        targetSdkVersion 22
        testInstrumentationRunner "uk.co.ribot.androidboilerplate.util.UnlockDeviceTestRunner"
        versionCode 1000
        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName "0.1.0"

        def externalVersionNameSuffix = System.getenv("VERSION_NAME_SUFFIX");
        if (externalVersionNameSuffix != null) versionName += "." + externalVersionNameSuffix

        if (distributionGroup != null && !(distributionChannel == DISTRIBUTION_CHANNEL.PLAY && distributionGroup.equals("production"))) {
            versionName += "." + distribution
        }
    }

    signingConfigs {
        // You must set up an environment var before release signing
        // Run: export APP_KEY={password}
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file("keystore/release.keystore")
            keyAlias "alias"
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
        }

        debug {
            storeFile file("keystore/debug.keystore")
            keyAlias "androiddebugkey"
            storePassword "android"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            /*
            * By default ProGuard optimizations are disabled. If you want to enable them
            * replace proguard-android.txt with proguard-android-optimize.txt but make sure you
            * test thoroughly if you go this route as app may become unstable.
            */
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionReleaseNotesFilePath = file("../crashlytics_release_notes.txt").absolutePath

            if (distributionGroup != null && distributionChannel == DISTRIBUTION_CHANNEL.CRASHLYTICS) {
                ext.betaDistributionGroupAliases = distributionGroup
            }
        }

        debug {
            versionNameSuffix " Debug"
            debuggable true
        }
    }

    //Needed because of espresso and robolectric
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    //Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
    }

}

play {
    serviceAccountEmail = 'your-service-account-email'
    pk12File = file('key.p12')

    if (distributionGroup != null && distributionChannel == DISTRIBUTION_CHANNEL.PLAY) {
        track = distributionGroup
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.android.gms:play-services-gcm:7.5.0'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.android.support:cardview-v7:22.2.1'
    compile 'com.android.support:support-annotations:22.2.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.sqlbrite:sqlbrite:0.2.1'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup:otto:1.3.8'
    compile 'io.reactivex:rxandroid:0.25.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'uk.co.ribot:easyadapter:1.5.0@aar'
    compile 'com.crashlytics.android:crashlytics:1.1.13'
    compile 'com.mcxiaoke.volley:library:1.0.15'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'

    // Espresso
    androidTestCompile 'com.android.support:support-annotations:22.2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    gradle.startParameter.taskNames.each { name ->
        if (!name.startsWith('test')) {
            androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
            androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
        }
    }

    // Robolectric
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile('org.robolectric:robolectric:3.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

}


